Grammar

    0 $accept: program $end

    1 program: variable_list code_list

    2 variable_list: %empty
    3              | variable_list variable

    4 @1: %empty

    5 variable: _LABEL_DEF @1 _WORD _NUMBER

    6 @2: %empty

    7 variable: _LABEL_DEF @2 _BYTE _NUMBER

    8 code_list: code_line
    9          | code_list code_line

   10 code_line: label_def
   11          | asm_line

   12 label_def: _LABEL_DEF

   13 asm_line: arithmetic
   14         | logical
   15         | flowcontrol
   16         | stack
   17         | _HALT

   18 logical: _AND input _COMMA input _COMMA output
   19        | _OR input _COMMA input _COMMA output
   20        | _XOR input _COMMA input _COMMA output
   21        | _NOT input _COMMA output

   22 arithmetic: _ADD input _COMMA input _COMMA output
   23           | _SUB input _COMMA input _COMMA output
   24           | _MUL input _COMMA input _COMMA output
   25           | _DIV input _COMMA input _COMMA output
   26           | _MOV input _COMMA output

   27 flowcontrol: _CMP input _COMMA input
   28            | _JMP label
   29            | _JEQ label
   30            | _JNE label
   31            | _JGT label
   32            | _JLT label
   33            | _JGE label
   34            | _JLE label
   35            | _JC label
   36            | _JNC label
   37            | _JO label
   38            | _JNO label

   39 stack: _PUSH input
   40      | _POP output
   41      | _CALL label
   42      | _RET

   43 label: _LABEL

   44 output: _REGISTER
   45       | _NUMBER _LPAREN _REGISTER _RPAREN
   46       | _LPAREN _REGISTER _RPAREN
   47       | label

   48 input: _CONSTANT
   49      | _ADDRESS
   50      | output


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _WORD (258) 5
    _BYTE (259) 7
    _PUSH (260) 39
    _POP (261) 40
    _CALL (262) 41
    _RET (263) 42
    _CMP <i> (264) 27
    _JMP (265) 28
    _JEQ (266) 29
    _JNE (267) 30
    _JGT <i> (268) 31
    _JLT <i> (269) 32
    _JGE <i> (270) 33
    _JLE <i> (271) 34
    _JC (272) 35
    _JNC (273) 36
    _JO (274) 37
    _JNO (275) 38
    _ADD <i> (276) 22
    _SUB <i> (277) 23
    _MUL <i> (278) 24
    _DIV <i> (279) 25
    _MOV (280) 26
    _HALT (281) 17
    _AND <i> (282) 18
    _OR <i> (283) 19
    _XOR <i> (284) 20
    _NOT <i> (285) 21
    _REGISTER <i> (286) 44 45 46
    _CONSTANT <i> (287) 48
    _NUMBER <i> (288) 5 7 45
    _LABEL_DEF <s> (289) 5 7 12
    _LABEL <s> (290) 43
    _ADDRESS <s> (291) 49
    _COMMA (292) 18 19 20 21 22 23 24 25 26 27
    _LPAREN (293) 45 46
    _RPAREN (294) 45 46


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    program (41)
        on left: 1
        on right: 0
    variable_list (42)
        on left: 2 3
        on right: 1 3
    variable (43)
        on left: 5 7
        on right: 3
    @1 (44)
        on left: 4
        on right: 5
    @2 (45)
        on left: 6
        on right: 7
    code_list (46)
        on left: 8 9
        on right: 1 9
    code_line (47)
        on left: 10 11
        on right: 8 9
    label_def (48)
        on left: 12
        on right: 10
    asm_line (49)
        on left: 13 14 15 16 17
        on right: 11
    logical (50)
        on left: 18 19 20 21
        on right: 14
    arithmetic (51)
        on left: 22 23 24 25 26
        on right: 13
    flowcontrol (52)
        on left: 27 28 29 30 31 32 33 34 35 36 37 38
        on right: 15
    stack (53)
        on left: 39 40 41 42
        on right: 16
    label <s> (54)
        on left: 43
        on right: 28 29 30 31 32 33 34 35 36 37 38 41 47
    output <s> (55)
        on left: 44 45 46 47
        on right: 18 19 20 21 22 23 24 25 26 40 50
    input <s> (56)
        on left: 48 49 50
        on right: 18 19 20 21 22 23 24 25 26 27 39


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (variable_list)

    program        go to state 1
    variable_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: variable_list . code_list
    3 variable_list: variable_list . variable

    _PUSH       shift, and go to state 4
    _POP        shift, and go to state 5
    _CALL       shift, and go to state 6
    _RET        shift, and go to state 7
    _CMP        shift, and go to state 8
    _JMP        shift, and go to state 9
    _JEQ        shift, and go to state 10
    _JNE        shift, and go to state 11
    _JGT        shift, and go to state 12
    _JLT        shift, and go to state 13
    _JGE        shift, and go to state 14
    _JLE        shift, and go to state 15
    _JC         shift, and go to state 16
    _JNC        shift, and go to state 17
    _JO         shift, and go to state 18
    _JNO        shift, and go to state 19
    _ADD        shift, and go to state 20
    _SUB        shift, and go to state 21
    _MUL        shift, and go to state 22
    _DIV        shift, and go to state 23
    _MOV        shift, and go to state 24
    _HALT       shift, and go to state 25
    _AND        shift, and go to state 26
    _OR         shift, and go to state 27
    _XOR        shift, and go to state 28
    _NOT        shift, and go to state 29
    _LABEL_DEF  shift, and go to state 30

    variable     go to state 31
    code_list    go to state 32
    code_line    go to state 33
    label_def    go to state 34
    asm_line     go to state 35
    logical      go to state 36
    arithmetic   go to state 37
    flowcontrol  go to state 38
    stack        go to state 39


State 3

    0 $accept: program $end .

    $default  accept


State 4

   39 stack: _PUSH . input

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 48


State 5

   40 stack: _POP . output

    _REGISTER  shift, and go to state 40
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 49


State 6

   41 stack: _CALL . label

    _LABEL  shift, and go to state 43

    label  go to state 50


State 7

   42 stack: _RET .

    $default  reduce using rule 42 (stack)


State 8

   27 flowcontrol: _CMP . input _COMMA input

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 51


State 9

   28 flowcontrol: _JMP . label

    _LABEL  shift, and go to state 43

    label  go to state 52


State 10

   29 flowcontrol: _JEQ . label

    _LABEL  shift, and go to state 43

    label  go to state 53


State 11

   30 flowcontrol: _JNE . label

    _LABEL  shift, and go to state 43

    label  go to state 54


State 12

   31 flowcontrol: _JGT . label

    _LABEL  shift, and go to state 43

    label  go to state 55


State 13

   32 flowcontrol: _JLT . label

    _LABEL  shift, and go to state 43

    label  go to state 56


State 14

   33 flowcontrol: _JGE . label

    _LABEL  shift, and go to state 43

    label  go to state 57


State 15

   34 flowcontrol: _JLE . label

    _LABEL  shift, and go to state 43

    label  go to state 58


State 16

   35 flowcontrol: _JC . label

    _LABEL  shift, and go to state 43

    label  go to state 59


State 17

   36 flowcontrol: _JNC . label

    _LABEL  shift, and go to state 43

    label  go to state 60


State 18

   37 flowcontrol: _JO . label

    _LABEL  shift, and go to state 43

    label  go to state 61


State 19

   38 flowcontrol: _JNO . label

    _LABEL  shift, and go to state 43

    label  go to state 62


State 20

   22 arithmetic: _ADD . input _COMMA input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 63


State 21

   23 arithmetic: _SUB . input _COMMA input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 64


State 22

   24 arithmetic: _MUL . input _COMMA input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 65


State 23

   25 arithmetic: _DIV . input _COMMA input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 66


State 24

   26 arithmetic: _MOV . input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 67


State 25

   17 asm_line: _HALT .

    $default  reduce using rule 17 (asm_line)


State 26

   18 logical: _AND . input _COMMA input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 68


State 27

   19 logical: _OR . input _COMMA input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 69


State 28

   20 logical: _XOR . input _COMMA input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 70


State 29

   21 logical: _NOT . input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 71


State 30

    5 variable: _LABEL_DEF . @1 _WORD _NUMBER
    7         | _LABEL_DEF . @2 _BYTE _NUMBER
   12 label_def: _LABEL_DEF .

    _WORD     reduce using rule 4 (@1)
    _BYTE     reduce using rule 6 (@2)
    $default  reduce using rule 12 (label_def)

    @1  go to state 72
    @2  go to state 73


State 31

    3 variable_list: variable_list variable .

    $default  reduce using rule 3 (variable_list)


State 32

    1 program: variable_list code_list .
    9 code_list: code_list . code_line

    _PUSH       shift, and go to state 4
    _POP        shift, and go to state 5
    _CALL       shift, and go to state 6
    _RET        shift, and go to state 7
    _CMP        shift, and go to state 8
    _JMP        shift, and go to state 9
    _JEQ        shift, and go to state 10
    _JNE        shift, and go to state 11
    _JGT        shift, and go to state 12
    _JLT        shift, and go to state 13
    _JGE        shift, and go to state 14
    _JLE        shift, and go to state 15
    _JC         shift, and go to state 16
    _JNC        shift, and go to state 17
    _JO         shift, and go to state 18
    _JNO        shift, and go to state 19
    _ADD        shift, and go to state 20
    _SUB        shift, and go to state 21
    _MUL        shift, and go to state 22
    _DIV        shift, and go to state 23
    _MOV        shift, and go to state 24
    _HALT       shift, and go to state 25
    _AND        shift, and go to state 26
    _OR         shift, and go to state 27
    _XOR        shift, and go to state 28
    _NOT        shift, and go to state 29
    _LABEL_DEF  shift, and go to state 74

    $default  reduce using rule 1 (program)

    code_line    go to state 75
    label_def    go to state 34
    asm_line     go to state 35
    logical      go to state 36
    arithmetic   go to state 37
    flowcontrol  go to state 38
    stack        go to state 39


State 33

    8 code_list: code_line .

    $default  reduce using rule 8 (code_list)


State 34

   10 code_line: label_def .

    $default  reduce using rule 10 (code_line)


State 35

   11 code_line: asm_line .

    $default  reduce using rule 11 (code_line)


State 36

   14 asm_line: logical .

    $default  reduce using rule 14 (asm_line)


State 37

   13 asm_line: arithmetic .

    $default  reduce using rule 13 (asm_line)


State 38

   15 asm_line: flowcontrol .

    $default  reduce using rule 15 (asm_line)


State 39

   16 asm_line: stack .

    $default  reduce using rule 16 (asm_line)


State 40

   44 output: _REGISTER .

    $default  reduce using rule 44 (output)


State 41

   48 input: _CONSTANT .

    $default  reduce using rule 48 (input)


State 42

   45 output: _NUMBER . _LPAREN _REGISTER _RPAREN

    _LPAREN  shift, and go to state 76


State 43

   43 label: _LABEL .

    $default  reduce using rule 43 (label)


State 44

   49 input: _ADDRESS .

    $default  reduce using rule 49 (input)


State 45

   46 output: _LPAREN . _REGISTER _RPAREN

    _REGISTER  shift, and go to state 77


State 46

   47 output: label .

    $default  reduce using rule 47 (output)


State 47

   50 input: output .

    $default  reduce using rule 50 (input)


State 48

   39 stack: _PUSH input .

    $default  reduce using rule 39 (stack)


State 49

   40 stack: _POP output .

    $default  reduce using rule 40 (stack)


State 50

   41 stack: _CALL label .

    $default  reduce using rule 41 (stack)


State 51

   27 flowcontrol: _CMP input . _COMMA input

    _COMMA  shift, and go to state 78


State 52

   28 flowcontrol: _JMP label .

    $default  reduce using rule 28 (flowcontrol)


State 53

   29 flowcontrol: _JEQ label .

    $default  reduce using rule 29 (flowcontrol)


State 54

   30 flowcontrol: _JNE label .

    $default  reduce using rule 30 (flowcontrol)


State 55

   31 flowcontrol: _JGT label .

    $default  reduce using rule 31 (flowcontrol)


State 56

   32 flowcontrol: _JLT label .

    $default  reduce using rule 32 (flowcontrol)


State 57

   33 flowcontrol: _JGE label .

    $default  reduce using rule 33 (flowcontrol)


State 58

   34 flowcontrol: _JLE label .

    $default  reduce using rule 34 (flowcontrol)


State 59

   35 flowcontrol: _JC label .

    $default  reduce using rule 35 (flowcontrol)


State 60

   36 flowcontrol: _JNC label .

    $default  reduce using rule 36 (flowcontrol)


State 61

   37 flowcontrol: _JO label .

    $default  reduce using rule 37 (flowcontrol)


State 62

   38 flowcontrol: _JNO label .

    $default  reduce using rule 38 (flowcontrol)


State 63

   22 arithmetic: _ADD input . _COMMA input _COMMA output

    _COMMA  shift, and go to state 79


State 64

   23 arithmetic: _SUB input . _COMMA input _COMMA output

    _COMMA  shift, and go to state 80


State 65

   24 arithmetic: _MUL input . _COMMA input _COMMA output

    _COMMA  shift, and go to state 81


State 66

   25 arithmetic: _DIV input . _COMMA input _COMMA output

    _COMMA  shift, and go to state 82


State 67

   26 arithmetic: _MOV input . _COMMA output

    _COMMA  shift, and go to state 83


State 68

   18 logical: _AND input . _COMMA input _COMMA output

    _COMMA  shift, and go to state 84


State 69

   19 logical: _OR input . _COMMA input _COMMA output

    _COMMA  shift, and go to state 85


State 70

   20 logical: _XOR input . _COMMA input _COMMA output

    _COMMA  shift, and go to state 86


State 71

   21 logical: _NOT input . _COMMA output

    _COMMA  shift, and go to state 87


State 72

    5 variable: _LABEL_DEF @1 . _WORD _NUMBER

    _WORD  shift, and go to state 88


State 73

    7 variable: _LABEL_DEF @2 . _BYTE _NUMBER

    _BYTE  shift, and go to state 89


State 74

   12 label_def: _LABEL_DEF .

    $default  reduce using rule 12 (label_def)


State 75

    9 code_list: code_list code_line .

    $default  reduce using rule 9 (code_list)


State 76

   45 output: _NUMBER _LPAREN . _REGISTER _RPAREN

    _REGISTER  shift, and go to state 90


State 77

   46 output: _LPAREN _REGISTER . _RPAREN

    _RPAREN  shift, and go to state 91


State 78

   27 flowcontrol: _CMP input _COMMA . input

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 92


State 79

   22 arithmetic: _ADD input _COMMA . input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 93


State 80

   23 arithmetic: _SUB input _COMMA . input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 94


State 81

   24 arithmetic: _MUL input _COMMA . input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 95


State 82

   25 arithmetic: _DIV input _COMMA . input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 96


State 83

   26 arithmetic: _MOV input _COMMA . output

    _REGISTER  shift, and go to state 40
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 97


State 84

   18 logical: _AND input _COMMA . input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 98


State 85

   19 logical: _OR input _COMMA . input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 99


State 86

   20 logical: _XOR input _COMMA . input _COMMA output

    _REGISTER  shift, and go to state 40
    _CONSTANT  shift, and go to state 41
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _ADDRESS   shift, and go to state 44
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 47
    input   go to state 100


State 87

   21 logical: _NOT input _COMMA . output

    _REGISTER  shift, and go to state 40
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 101


State 88

    5 variable: _LABEL_DEF @1 _WORD . _NUMBER

    _NUMBER  shift, and go to state 102


State 89

    7 variable: _LABEL_DEF @2 _BYTE . _NUMBER

    _NUMBER  shift, and go to state 103


State 90

   45 output: _NUMBER _LPAREN _REGISTER . _RPAREN

    _RPAREN  shift, and go to state 104


State 91

   46 output: _LPAREN _REGISTER _RPAREN .

    $default  reduce using rule 46 (output)


State 92

   27 flowcontrol: _CMP input _COMMA input .

    $default  reduce using rule 27 (flowcontrol)


State 93

   22 arithmetic: _ADD input _COMMA input . _COMMA output

    _COMMA  shift, and go to state 105


State 94

   23 arithmetic: _SUB input _COMMA input . _COMMA output

    _COMMA  shift, and go to state 106


State 95

   24 arithmetic: _MUL input _COMMA input . _COMMA output

    _COMMA  shift, and go to state 107


State 96

   25 arithmetic: _DIV input _COMMA input . _COMMA output

    _COMMA  shift, and go to state 108


State 97

   26 arithmetic: _MOV input _COMMA output .

    $default  reduce using rule 26 (arithmetic)


State 98

   18 logical: _AND input _COMMA input . _COMMA output

    _COMMA  shift, and go to state 109


State 99

   19 logical: _OR input _COMMA input . _COMMA output

    _COMMA  shift, and go to state 110


State 100

   20 logical: _XOR input _COMMA input . _COMMA output

    _COMMA  shift, and go to state 111


State 101

   21 logical: _NOT input _COMMA output .

    $default  reduce using rule 21 (logical)


State 102

    5 variable: _LABEL_DEF @1 _WORD _NUMBER .

    $default  reduce using rule 5 (variable)


State 103

    7 variable: _LABEL_DEF @2 _BYTE _NUMBER .

    $default  reduce using rule 7 (variable)


State 104

   45 output: _NUMBER _LPAREN _REGISTER _RPAREN .

    $default  reduce using rule 45 (output)


State 105

   22 arithmetic: _ADD input _COMMA input _COMMA . output

    _REGISTER  shift, and go to state 40
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 112


State 106

   23 arithmetic: _SUB input _COMMA input _COMMA . output

    _REGISTER  shift, and go to state 40
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 113


State 107

   24 arithmetic: _MUL input _COMMA input _COMMA . output

    _REGISTER  shift, and go to state 40
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 114


State 108

   25 arithmetic: _DIV input _COMMA input _COMMA . output

    _REGISTER  shift, and go to state 40
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 115


State 109

   18 logical: _AND input _COMMA input _COMMA . output

    _REGISTER  shift, and go to state 40
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 116


State 110

   19 logical: _OR input _COMMA input _COMMA . output

    _REGISTER  shift, and go to state 40
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 117


State 111

   20 logical: _XOR input _COMMA input _COMMA . output

    _REGISTER  shift, and go to state 40
    _NUMBER    shift, and go to state 42
    _LABEL     shift, and go to state 43
    _LPAREN    shift, and go to state 45

    label   go to state 46
    output  go to state 118


State 112

   22 arithmetic: _ADD input _COMMA input _COMMA output .

    $default  reduce using rule 22 (arithmetic)


State 113

   23 arithmetic: _SUB input _COMMA input _COMMA output .

    $default  reduce using rule 23 (arithmetic)


State 114

   24 arithmetic: _MUL input _COMMA input _COMMA output .

    $default  reduce using rule 24 (arithmetic)


State 115

   25 arithmetic: _DIV input _COMMA input _COMMA output .

    $default  reduce using rule 25 (arithmetic)


State 116

   18 logical: _AND input _COMMA input _COMMA output .

    $default  reduce using rule 18 (logical)


State 117

   19 logical: _OR input _COMMA input _COMMA output .

    $default  reduce using rule 19 (logical)


State 118

   20 logical: _XOR input _COMMA input _COMMA output .

    $default  reduce using rule 20 (logical)
